#include <cstdio>
#include <cstdlib>
#include <vector>
#include <numeric>
#include "../lib/tools.h"
using namespace std;
i64 limit = 1000000000000;
i64 l3 = 10000;
int ntable=l3*l3;
vector<int> vpcf;
vector<int> primes;
vector<int> v2310;
i64 find_next_prime_high(i64 num);
i64 find_next_prime_low(i64 num);
i64 fphi(i64 x, i64 pidx);
i64 phi2310 = 480;
//prime counting function
//start from 3 with a value of 2
//generating pcf in a small range
i64 debugphi(int num, int pidx){
    vector<int> flags;
    flags.resize(num+1, 1);
    flags[0] = 0;
    for( int i = 0; i <= pidx; ++i){
        int np = primes[i];
        for(unsigned int j = np; j < flags.size(); j += np)
            flags[j] = 0;
    }
    return accumulate(flags.begin(), flags.end(), 0);
}
i64 debugphi2(int num, int pidx)
{
    vector<int> flags;
    vector<int> vp;
    primeWithin(vp, num);
    flags.resize(num+1, 1);
    flags[0] = 0;
    for(unsigned int i = 0; i < vp.size(); ++i){
        int np = vp[i];
        if(np >= static_cast<int>(flags.size())) 
            break;
        flags[np] = 0;
    }
    for( int i = 0; i <= pidx; ++i){
        int np = vp[i];
        for(unsigned int j = np; j < flags.size();j += np ){
            flags[j] = 0;
        }
    }
    return accumulate(flags.begin(), flags.end(), 0)-1;
}
//this is a table for lookup purpose to the order of n^(2/3)
void create_pcf( vector<int>& vec, int limit)
{
    int odd = (limit+1)/2;
    vec.clear();
    vec.resize(odd, 1);
    vec[0] = 0;
    int ip= 1;  // prime number from 2 3 5 ....
    int iprime = 3;
    int max = sqrt((double) limit)+1;
    while( iprime <= max )
    {
      // sieve
        for(int i =(iprime * iprime-1)/2; i < odd; i+=iprime)
            vec[i] = 0;
      //find next prime
        while(vec[++ip] == 0);

        iprime = 2*ip+1;
    }
    vector<int> vf;
    vf.resize(odd,0);
    int cnt = 1;
    for(int i = 1; i< odd; ++i){
        cnt += vec[i];
        vec[i] = cnt;
    }
}
//prime counting function in a larger range using combinatoric
//algorithm 
i64 gpcf(i64 num)
{
    assert(num > 0);
    if(num == 2)
        return 1;
    if(num <= ntable)
        return vpcf[(num-1)/2];

    double dl = log(num);
    i64 v13 = exp(dl/3.0);
    i64 v2 = sqrt(num);
    if((v2+1)*(v2+1)==num) ++v2;
    if((v13+1)*(v13+1)*(v13+1)==num) ++v13;
    
    i64 pi13=gpcf(v13);
    i64 pi12=gpcf(v2);
    i64 phi2 = -pi12*(pi12-1)+pi13*(pi13-1);;
    phi2 /=2;
    int idx2 = find_next_prime_low(v2);
    int idx1 = find_next_prime_high(v13);
    for(int k =  idx1; k <= idx2; ++k){
        i64 n1 = num/primes[k];
        phi2 += gpcf(n1);
    }
    if(num == 500000000000LL)
    printf("%lld %lld %d %d\n", pi13, pi12, idx1, idx2);
    //assert(phi2 == debugphi2(num,idx1-1));
    i64 p13 = fphi(num, idx1-1);
    //assert(p13 == debugphi(num, idx1-1));
    if(num == limit/2) printf("%lld %lld %lld\n", p13, phi2, pi13);
    return p13-phi2-1+pi13;
}

//this is for the sqrt(x) part
//prime must be less than or equal to num
i64 find_next_prime_low(i64 num)
{
    assert(num < primes.back());
    int low = 0; 
    int high = primes.size()-1;
    int mid = 0;
    while(low < high){
        mid = (low +high)/2;
        if(primes[mid]==num)
            return mid;
        else if(primes[mid] > num){
            high = mid-1;
            if(primes[high] <= num)
                return high;
        }else{//low is equal to or less than num
            low = mid+1;
            if(primes[low]> num)
                return low-1;
        }
    }
    assert(low == high);
    assert(0);
    if(primes[low] > num)
        return low - 1;
    else 
        return low;
}
//this is for the cuberoot side, prime must be greater than num
i64 find_next_prime_high(i64 num)
{
    assert(num < primes.back());
    int low = 0; 
    int high = primes.size()-1;
    int mid = 0;
    while(low < high){
        mid = (low + high)/2;
        if(primes[mid] == num)
            return mid + 1;
        else if(primes[mid] > num){
            high = mid - 1;
            if(primes[high] <= num)
                return high + 1;
        }else{
            low = mid + 1;
            if(primes[low] > num)
                return low;
        }
    }
    assert(low = high);
    assert(0);
    return -1;
}
//numbers that can not be divided by 2,3,5,7,11, 
//notice that 1 should not be counted as it has no
//prime factor
void create_phi2310()
{
    v2310.resize(2310, 1);
    vector<int> facs = {2,3,5,7,11};
    v2310[1]= 1;
    for(unsigned int i = 0; i < facs.size(); ++i){
        int nfac = facs[i];
        for(unsigned int j = 0; j < v2310.size(); j+=nfac){
            v2310[j] = 0;
        }
    }
    int cnt = 0;
    for(unsigned int i = 0; i < v2310.size(); ++i){
        cnt += v2310[i];
        v2310[i] = cnt;
    }
}
i64 fphi(i64 x, i64 pidx)
{
    if(x == 0) return 0;
    if(x < primes[pidx]) return 1;
    if(pidx == 0)
        return (x+1)/2;
    else if(pidx == 4) {//4 is the index of 11
        i64 res = x % 2310;
        return (x/2310)*phi2310 +v2310[res];
    }
    i64 val1 = fphi(x, pidx-1);
    i64 val2 = fphi(x/primes[pidx], pidx-1);
    return val1-val2;
}
int main()
{
    primeWithin(primes, ntable);
    create_pcf(vpcf, ntable);
    create_phi2310();
    printf("%lld\n", gpcf(limit/100));
    exit(1);
}
