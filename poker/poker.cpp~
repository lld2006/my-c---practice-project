#include <vector>
#include <cstdio>
#include <cassert>
#include <algorithm>
using namespace std;
enum COLOR {H=0, D, S, C};//heart diamond, spade, club
enum GRADE {HIGH = 0,
            ONE = 13, 
            TWO = 26,
            THREE = 39,
            STRAIGHT = 52,
            FLUSH = 65,
            FULL = 78,
            FOUR = 91,
            SFLUSH = 104};

struct grade {
    unsigned int type;
    int sec_type;
    int highest;
    int same_color;
};
    
bool same_color(vector<int>& color)
{
    vector<int> counter;
    counter.resize(4, 0);
    for(unsigned int i = 0; i < color.size(); ++i){
        ++counter[color[i]];
    }
    return count(counter.begin(), counter.end(), 5);
}

//high_card 1---13
//one_pair  14--26
//two_pair  27--39 pair one, pair two
//three of a kind, 40--52
//straight 53--65
//flush 66-- 78
//full house 79--91
//four of a kind 92 -- 104 
//straight flush 105 -- 117

void check_num(vector<int>& num, grade& grade)
{
    vector<int> digflag;
    digflag.resize(13, 0);
    for(unsigned int i = 0; i < num.size(); ++i){ 
        ++digflag[num[i]];
    }
    int stat = 0;
    if(digflag[12]==1) stat  = 1;
    grade.highest = 0;
    for(unsigned int i = 0 ; i < digflag.size(); ++i){
        if(digflag[i]==4) {
            grade.type = FOUR + i;
            continue;
        }
        if( digflag[i] == 3 ){
            if(grade.type > ONE) {
                assert(grade.type <= TWO );
                grade.sec_type = grade.type - ONE;
                grade.type = FULL+i;
                continue;
            }
            else{
                grade.type = THREE + i;    
                continue;
            }
        }
        if( digflag[i] == 2 ){
            if(grade.type > THREE ){
                grade.type += FULL - THREE;
                grade.sec_type = i;
            }
            else if (grade.type > ONE){
                assert( grade.type <= TWO );
                assert( grade.type != ONE + i);
                int imax = max(i, grade.type-ONE);
                int imin = (i+grade.type-ONE-imax);
                grade.type = imax;
                grade.sec_type = imin;
            } else {
                grade.type = ONE + i;
            }
            continue;
        } 
        if(digflag[i] == 1){
            if(stat >=0 && stat < 5) ++stat;
            grade.highest = i;
        }else{
            if(stat < 5 && stat >0 ) --stat;
        }
    }
    if(stat == 5){
        grade.type = STRAIGHT +grade.highest;
        if(grade.same_color) 
            grade.type = SFLUSH + grade.highest;
    }else{
        if (grade.same_color)
            grade.type = FLUSH +grade.highest;//this may still not enough
    }
}
bool poke_compare(vector<int>& num1, vector<int>& color1, 
                  vector<int>& num2, vector<int>& color2){
    struct grade grade1, grade2;
    grade1.type = 0;
    grade1.sec_type = 0;
    grade1.highest = 0;
    grade2.type = 0;
    grade2.sec_type = 0;
    grade2.highest = 0;
    grade1.same_color = same_color(color1);
    grade2.same_color = same_color(color2);
    check_num(num1, grade1);
    check_num(num2, grade2);
    assert(grade1.type != grade2.type||
           (grade1.type == grade2.type 
         && grade1.sec_type != grade2.sec_type) );
    return grade1.type > grade2.type || grade1.sec_type > grade2.sec_type; // sec
}

int main()
{
    vector<int> num1, color1, num2, color2;
    FILE* fp;
    fp = fopen("poker.txt", "r");
    char cards[10];
    while(fscanf(fp, "10%s", cards)==10 ){
        poke_compare(num1, color1, num2, color2);
    }
}
