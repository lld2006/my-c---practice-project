#include <cstdio>
#include <cmath>
#include <cassert>
#include <cstdlib>
int radius = 1000*sqrt(17.0/40); 
int xcenter = 750;
int ycenter = 750;
double f(double x, double y)
{
    return ( 5000-0.005*(x*x+y*y+x*y)+12.5*(x+y) ) * exp( -fabs(0.000001*(x*x+y*y)-0.0015*(x+y)+0.7) );
}
double f1(double x, double y)
{
    return ( 5000-0.005*(x*x+y*y+x*y)+12.5*(x+y) ) * exp( -(0.000001*(x*x+y*y)-0.0015*(x+y)+0.7) );
}
double dfx(double x, double y)
{
    double x1 = x/1000;
    double y1 = y/1000;
    //use negative value
    double nexp = x1*x1+y1*y1-1.5*(x1+y1)+0.7;
    double nbase =  5000-0.005*(x*x+y*y+x*y)+12.5*(x+y) ;
    double dbase = -0.005*(2*x+y)+12.5;
    double dexp = 2e-3*x1-0.0015;
    if(nexp <=0){
        return (dbase+nbase*dexp)*exp(nexp);
    }else{
        return (dbase-nbase*dexp)*exp(nexp);
    }
}
double binary_search(double x1, double x2, double y)
{
    assert(dfx(x1,y) > 0);
    assert(dfx(x2,y) < 0);
    double xmid = 0;
    while(fabs(x2-x1)> 1e-10){
        xmid = (x1+x2)/2.0;
        if(dfx(xmid, y ) > 0)
            x1 = xmid;
        else
            x2 = xmid;
    }
    return xmid;
}
void find_max_barrier(double y, double& ret1, double& ret2)
{
    if((y < ycenter - radius)||(y > ycenter + radius)){
        ret1 = binary_search(0, 1600, y);
        ret2 = ret1;
    }else{
        assert(0);
        //double x0 = sqrt(radius*radius - (ycenter-y)*(ycenter-y));
        ret1 = binary_search(0, 750, y);
        ret2 = binary_search(750, 1600, y);
    }
}

double find_y_at_h(double x, double h, double yguess)
{
    double y = yguess;
    assert(0.000001*(x*x+y*y)-0.0015*(x+y)+0.7 > 0);
    double fy = f(x, yguess);
    while(fabs(fy-h)>1e-10){
        double slope = dfx(yguess, x); 
        yguess -= (fy-h) /slope;
        fy = f1(x, yguess);
    }
    return yguess;
}

double tangent_h(double x, double h, double& y, double yguess)
{
    y = find_y_at_h(x, h,yguess);
    double dx = dfx(x,y);
    double dy = dfx(y,x);
    assert(dy != 0);
    return -dx/dy;
}
//find where start and end to line segment part
double find_tangent(double height, double start, double end )
{
    double yguess = start;
    double yfinal = start;
    double yend, ymid, ystart;
    double dend = tangent_h(end, height, yend, yguess);
    double y2 = yend + (start - end)*dend;

    double dstart = tangent_h(start, height, ystart, yguess);
    assert((y2 - start)*(ystart - yfinal) <0);

    double mid;
    while(fabs(start - end) > 1e-10){
        mid = (start + end)/2;
        double dmid = tangent_h(mid, height, ymid, yguess);
        double y1 = ymid + (start - mid)*dmid;
        if((y1-yfinal)*(ystart - yfinal) > 0){
            start = mid;
        }else{
            end = mid;
        }
    }
    return mid;
}
int main()
{
   //test code
   //double x0=200;
   //double y0 = 200;
   //double h=f(x0, y0);
   //assert(0.000001*(x0*x0+y0*y0)-0.0015*(x0+y0)+0.7>0);
   //double result = find_y_at_h(x0, h, 200 );
   //printf("%30.15f %30.15f\n", result, f(x0, result)-h);
   //exit(1);
   double PI = 4.0*atan(1.0);
   double ret1, ret2;
   double radius = sqrt(17.0/40)*1000;
   //first find the fmin, minimum height
   find_max_barrier(0, ret1, ret2);
   double barrierx = ret1;
   double maxh = f(ret1, 0);
   printf("%30.15f, %30.15f %30.15f\n", ret1, f(ret1, 0), dfx(ret1, 0));
   //second, find the tangential point from 200 200 to x y at this height
   double x200 = find_tangent(maxh, 200, barrierx);
   printf("%30.15f\n", x200);
}
