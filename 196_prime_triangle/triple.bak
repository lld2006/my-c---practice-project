#include <cstdio>
#include <cstdlib>
#include <cassert>
#include "../lib/int2.h"
#include "../lib/tools.h"

vector<vector<i64> > vnn;
vector<vector<int> > pflags;
vector<int> triple;
void check_triple(const vector<int>& nrow, vector<int>& nshift, vector<int>& flag, 
                  int start, unsigned int nlast)
{
    for(unsigned int i = start; i < nlast; ++i){
        if(pflags[nrow[0]][i+nshift[0]] && pflags[nrow[1]][i+nshift[1]] 
                && pflags[nrow[2]][i+nshift[2]])
            for(unsigned int j = 0; j < 3; ++j){
                if(flag[j]) triple[i+nshift[j]] = 1;
            }
    }
}
int main()
{
    //i64 xtest  = product_mod(999999999999, 999999777997, 1000000000003);
    //printf("%lld\n", xtest);
    for( int i = 1; i < 999; ++i)
        for( int j = 1; j < 999; ++j){
            //printf("%d %d\n", i, j);
            GeneralInteger ga(i), gb(j);
            //i64 prod = ga.multiply2(gb).to_i64() ;
            i64 prod = (ga*gb).to_i64();
            //i64 prod = i *j ;
            assert(prod == i * j );
        }
    exit(1);
    int nsample = 5;
    i64 n = 5678027; //even even odd odd even
    vector<int> shift;// shift to the 
    vnn.resize(5); shift.resize(5); pflags.resize(5);
    //generate all odd numbers in row n-2, n-1, n, n+1, n+2
    //and find all primes in each row
    for(int i = -2 ; i <= 2; ++i){
        i64 nfirst = (i64)((n+i))*(n+i-1)/2+1;
        if(nfirst%2== 0) {
            shift[i+2] = 1;
            ++nfirst;
        }
        unsigned int number = (n-i-shift[i+2])/2;
        vnn[i+2].resize(number);
        pflags[i+2].resize(number, -1);
        for(unsigned int j =0 ; j < number; ++j, nfirst+=2 ){
            if(j % 10000 == 0)
                printf("%d %d\n", i, j);
            if( j == 10000)
                exit(0);
            vnn[i+2][j] = nfirst;
            if(nfirst % 3 == 0) 
                pflags[i+2][j] = 0;
            else
                pflags[i+2][j] = miller_rabin(nfirst, nsample);
        }
    }
    triple.resize(pflags[2].size(), 0);
    vector<int> nrow, nshift, setflag;
    nrow.resize(3); nshift.resize(3, 0); setflag.resize(3, 0);

    //10000-like behavior
    if(false){
        //row n -2's contribution
        nrow[1]=1; nrow[2]=2; setflag[2]=1;
        check_triple(nrow, nshift, setflag, 0, vnn[0].size());
        nshift[2]=1;
        check_triple(nrow, nshift, setflag, 0, vnn[0].size());

        //row n-1's contribution two in n-1 1 in n
        nrow[0]=1; nrow[1]=1; nrow[2]=2;    nshift[1]=1; nshift[2]=1; 
        setflag[0]=0; setflag[1]=0; setflag[2]=1;
        check_triple(nrow, nshift, setflag, 0, vnn[1].size()-1);

        //two in n and one in n-1 or one in n-1 one in n and one in n+1
        nrow[0]=1; nrow[1]=2; nrow[2]=2; nshift[1]=0; nshift[2]=1;
        setflag[0]=0; setflag[1]=1; setflag[2]=1;
        check_triple(nrow, nshift, setflag, 0, vnn[1].size());

        nrow[0]=1; nrow[1]=2; nrow[2]=3; nshift[1]=0; nshift[2]=0;
        setflag[0]=0; setflag[1]=1; setflag[2]=0;
        check_triple(nrow, nshift, setflag, 0, vnn[1].size());

        nrow[0]=1; nrow[1]=2; nrow[2]=3; nshift[1]=1; nshift[2]=1;
        setflag[0]=0; setflag[1]=1; setflag[2]=0;
        check_triple(nrow, nshift, setflag, 0, vnn[1].size());

        //n n +1 and n+2 
        nrow[0]=2; nrow[1]=3; nrow[2]=4; nshift[1]=0; nshift[2]=0;
        setflag[0]=1; setflag[1]=0; setflag[2]=0;
        check_triple(nrow, nshift, setflag, 0, vnn[2].size());

        nrow[0]=2; nrow[1]=3; nrow[2]=4; nshift[1]=0; nshift[2]=-1;
        setflag[0]=1; setflag[1]=0; setflag[2]=0;
        check_triple(nrow, nshift, setflag, 1, vnn[2].size());
    }
    //row 5678027, n start at 1.6e13 even 
    if(true){
        nrow[0]=0; nrow[1]=1; nrow[2]=2; nshift[0]=0; nshift[1]=0; nshift[2]=0;
        setflag[0]=0; setflag[1]=0; setflag[2]=1;
        check_triple(nrow, nshift, setflag, 0, vnn[0].size());

        nrow[0]=0; nrow[1]=1; nrow[2]=2; nshift[0]=1; nshift[1]=0; nshift[2]=0;
        setflag[0]=0; setflag[1]=0; setflag[2]=1;
        check_triple(nrow, nshift, setflag, 0, vnn[0].size()-1);

        nrow[0]=1; nrow[1]=2; nrow[2]=3; nshift[0]=0; nshift[1]=0; nshift[2]=0;
        setflag[0]=0; setflag[1]=1; setflag[2]=0;
        check_triple(nrow, nshift, setflag, 0, vnn[1].size());

        nrow[0]=1; nrow[1]=2; nrow[2]=3; nshift[0]=0; nshift[1]=0; nshift[2]=1;
        setflag[0]=0; setflag[1]=1; setflag[2]=0;
        check_triple(nrow, nshift, setflag, 0, vnn[1].size());

        nrow[0]=2; nrow[1]=3; nrow[2]=3; nshift[0]=0; nshift[1]=0; nshift[2]=1;
        setflag[0]=1; setflag[1]=0; setflag[2]=0;
        check_triple(nrow, nshift, setflag, 0, vnn[2].size());

        nrow[0]=2; nrow[1]=2; nrow[2]=3; nshift[0]=0; nshift[1]=1; nshift[2]=1;
        setflag[0]=1; setflag[1]=1; setflag[2]=0;
        check_triple(nrow, nshift, setflag, 0, vnn[2].size()-1);

        nrow[0]=2; nrow[1]=3; nrow[2]=4; nshift[0]=0; nshift[1]=0; nshift[2]=0;
        setflag[0]=1; setflag[1]=0; setflag[2]=0;
        check_triple(nrow, nshift, setflag, 0, vnn[2].size());

        nrow[0]=2; nrow[1]=3; nrow[2]=4; nshift[0]=0; nshift[1]=1; nshift[2]=1;
        setflag[0]=1; setflag[1]=0; setflag[2]=0;
        check_triple(nrow, nshift, setflag, 0, vnn[2].size());
    }
    //row 7208785, n start at 2.6e13
    i64 sum = 0;
    for(unsigned int i = 0 ; i < vnn[2].size(); ++i){
        if(triple[i]){
            sum += vnn[2][i];
            printf("%lld\n", vnn[2][i]);
        }
    }
    printf("%lld\n", sum);
}
